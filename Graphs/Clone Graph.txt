"""
# Definition for a Node.
class Node:
    def __init__(self, val = 0, neighbors = None):
        self.val = val
        self.neighbors = neighbors if neighbors is not None else []
"""

from typing import Optional
class Solution:
    def cloneGraph(self, node: Optional['Node']) -> Optional['Node']:
        
        oldtonew = {}
        
        def dfs (node):
            
            if not node:
                return None
            
            if node in oldtonew:
                return oldtonew[node]
            
            newnode = Node (node.val)
            oldtonew[node] = newnode
            
            for nei in node.neighbors:
                newnode.neighbors.append(dfs(nei))
            return newnode
        

        return dfs (node)
        