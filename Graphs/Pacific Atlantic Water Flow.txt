class Solution:
    def pacificAtlantic(self, heights: List[List[int]]) -> List[List[int]]:
        pac = set()
        atl = set()
        res = []
        
        
        def dfs (row,col,visit,prev_height):
            if (((row,col) in visit) or
                row < 0 or row == len(heights) or 
                col < 0 or col == len(heights[0]) or 
                heights[row][col] < prev_height):
                return 
            
            visit.add((row,col))
            dfs (row+1,col,visit,heights[row][col])
            dfs (row-1,col,visit,heights[row][col])
            dfs (row,col+1,visit,heights[row][col])
            dfs (row,col-1,visit,heights[row][col])
            
        
        for col in range (len(heights[0])):
            dfs (0,col,pac,heights[0][col])
            dfs (len(heights)- 1,col,atl,heights[len(heights)- 1][col])
        
        for row in range (len(heights)):
            dfs (row,0,pac,heights[row][0])
            dfs (row , len ( heights[0] ) - 1 ,atl, heights[row][len(heights[0]) - 1])
        
        for r in range (len(heights)):
            for c in range (len(heights[0])):
                if (r,c) in atl and (r,c) in pac:
                    res.append((r,c))
        return res